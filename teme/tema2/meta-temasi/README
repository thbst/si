Tema: 2
Materie: Sisteme Incorporate (SI)
Autor: Nume Prenume
E-mail: email@domain
Grupa: Grupa
An universitar: 2015 - 2016


I. Pregatire mediu de lucru
===========================


1. Instalare initiala
Pentru implementarea temei, s-au rulat urmatorii pasi pregatitori (aceeasi cu cei descrisi in solutia laboratorului de Yocto)

-get yocto sources (tested with commit b8631416f12b8a904ce3deb036f9d5ce632937b0)
 -run 'git clone git://git.yoctoproject.org/poky'
 -change directory to '<poky-path>'
 -run 'git checkout b8631416f12b8a904ce3deb036f9d5ce632937b0'
-get raspberrypi yocto layer (tested with commit 6c6f44136f7e1c97bc45be118a48bd9b1fef1072)
 -change directory to '<poky-path>'
 -run 'git clone git://git.yoctoproject.org/meta-raspberrypi'
 -change directory to '<poky-path>/meta-raspberrypi'
 -run 'git checkout 6c6f44136f7e1c97bc45be118a48bd9b1fef1072'
-prepare to build
 -run 'source <poky-path>/oe-init-build-env <build-path>'
 -add the following line to '<build-path>/conf/local.conf'
    MACHINE = "raspberrypi"
 -optionally add the following lines to '<build-path>/conf/local.conf'
    BB_NUMBER_THREADS = "4"
    PARALLEL_MAKE = "-j5"
 -add the raspberrypi layer path '<poky-path>/meta-raspberrypi' to 'BBLAYERS' variable in '<build-path/conf/bblayers.conf'
-build
 -run 'bitbake rpi-basic-image' in same terminal as 'source ...'
-get compatible kernel
 -run 'wget http://cs.curs.pub.ro/wiki/si/_media/lab/2014/yocto/kernel.zip'
 -extract kernel image with 'unzip kernel.zip'

2. Setari de retea aditionale pt serverul de testare

Acest pas este optional, dar util pentru a putea testa conectivitatea catre masina virtuala din qemu direct dintr-o retea direct conectata si a verifica functionalitatea avahi-daemon. 
Instructiuni pe care le-am rulat pe masina fizica:

sudo brctl addbr virbr 				# creare bridge
sudo brctl addif virbr0 <interfata fizica>	# eth0 in cazul meu
sudo ifconfig <interfata fizica> 0.0.0.0	# dezalocare ip de pe interfata fizica
sudo ifconfig virbr0 <ip>/<prefix>		# alocare ip pe bridge
sudo route add default gw <gateway>		# readaugare ruta implicita
nslookup cs.curs.pub.ro 			# testare conexiune internet
echo "allow virbr0" >> /etc/qemu/bridge.conf	# configurare qemu pt a accepta virbr0

In subdirectorul scripts din directorul meta-temasi exista un script executabil bridge.sh care poate fi apelat pentru automatizarea setarilor de bridge


3. Adaugarea layer-ului temasi in build-ul existent

Instructiuni: 

cp archive.zip /home/user/poky/
cd /home/user/poky
unzip archive.zip
vim /home/user/poky/build/conf/bblayers.conf
...
BBFILES += "${TOPDIR}/recipes/images/*.bb"
BBLAYERS = "/home/user/poky/meta \
/home/user/poky/meta-yocto \
/home/user/poky/meta-yocto-bsp \
/home/user/poky/meta-raspberrypi \
/home/user/poky/meta-temasi \
"


II. Construire imagine

1. Comenzi

source /home/user/poky/oe-init-build-env /home/user/poky/build/
bitbake rpi-tema-image


2. Fisiere adaugate

/var/log/arp_db.log # tabela cu asocieri ip mac folosita pentru detectarea atacurilor de tip arp spoofin
/var/log/tcpdump.log # log tcpdump
/var/log/ids.log # log-ul serviciului de IDS (cu output conform cerintelor din enunt)


III. Testare
============

1. Rulare din qemu din linie de comanda

Pentru a putea rula qemu cu suport pentru aceasta interfata, am rulat urmatoarea comanda:

sudo qemu-system-arm -machine versatilepb -cpu arm1176 -kernel /home/user/si/tema2/zImage -append "root=/dev/sda rw console=ttyAMA0 console=tty1" -serial stdio -net nic,model=smc91c111,netdev=net0 -netdev bridge,br=virbr0,id=net0 -hda /home/user/poky/build/tmp/deploy/images/raspberrypi/rpi-tema-image-raspberrypi.ext3

Aceasta comanda se poate rula automat din scriptul launch.sh, disponibil in folderul /meta-temasi/scripts/

2. Comenzi utilizate pentru debugging

#simulare script local (fara qemu)
./test.sh (din subfolderul de meta-temasi/scripts)

#urmarire asocieri ip in tabela de ARP a scriptului
tail -f /var/log/arp_db.log
#urmarire log serviciu IDS
tail -f /var/log/ids.log




In cazul in care se doreste oprirea serviciului se poate rula urmatoarea comanda:
/etc/init.d/run-script stop
Pentru pornire manuala:
/etc/init.d/run-script start

Pentru a simula un atac de tip ARP spoofing se poate folosi utilitarul macchanger:

macchanger -a virbr0
Current MAC:   00:0c:29:d3:39:8e (VMware, Inc.)
Permanent MAC: 00:00:00:00:00:00 (XEROX CORPORATION)
New MAC:       00:18:02:d3:39:8e (Alpha Networks Inc.)




3. Specificatii sistem testare

BB_VERSION        = "1.24.0"
BUILD_SYS         = "i686-linux"
NATIVELSBSTRING   = "LinuxMint-17"
TARGET_SYS        = "arm-poky-linux-gnueabi"
MACHINE           = "raspberrypi"
DISTRO            = "poky"
DISTRO_VERSION    = "1.7"
TUNE_FEATURES     = "arm armv6 vfp"
TARGET_FPU        = "vfp"


IV. Bonus
=========

1. Notificare prin e-mail

In momentul detectarii unui atac de tip ARP Spoofing, se trimite mail catre o adresa de e-mail predefinita si care poate fi modificata prin editarea fisierului /usr/sbin/support-script (variabila $email)




